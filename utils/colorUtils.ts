import Color from 'color';
import { jsPDF } from 'jspdf';

export interface ColorPalette {
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  text: string;
  name: string;
  category: string;
}

const categories = [
  "Vibrant", "Pastel", "Earthy", "Monochromatic", "Complementary",
  "Triadic", "Analogous", "Neutral", "Bold", "Muted"
];

const adjectivesList = [
  "Autumn", "Spring", "Summer", "Winter", "Sunset", "Dawn", "Twilight", "Midnight",
  "Ocean", "Forest", "Desert", "Mountain", "Urban", "Rustic", "Neon", "Vintage",
  "Futuristic", "Retro", "Tropical", "Arctic", "Cosmic", "Ethereal", "Mystic"
];

const nounsList = [
  "Breeze", "Whisper", "Thunder", "Cascade", "Horizon", "Oasis", "Mirage", "Zenith",
  "Nebula", "Prism", "Spectrum", "Harmony", "Rhythm", "Melody", "Symphony", "Fusion",
  "Essence", "Spirit", "Aura", "Radiance", "Glow", "Spark", "Flare"
];

function generatePaletteName(): string {
  const adjective = adjectivesList[Math.floor(Math.random() * adjectivesList.length)];
  const noun = nounsList[Math.floor(Math.random() * nounsList.length)];
  return `${adjective} ${noun}`;
}

function generateRandomColor(): string {
  return Color.hsl(
    Math.random() * 360,
    25 + Math.random() * 70,
    20 + Math.random() * 60
  ).hex();
}

function getCategory(colors: Omit<ColorPalette, 'name' | 'category'>): string {
  const colorValues = Object.values(colors);
  const avgSaturation = colorValues.reduce((sum, c) => sum + Color(c).saturationl(), 0) / colorValues.length;
  const avgLightness = colorValues.reduce((sum, c) => sum + Color(c).lightness(), 0) / colorValues.length;

  if (avgSaturation > 80) return "Vibrant";
  if (avgSaturation < 30 && avgLightness > 80) return "Pastel";
  if (avgLightness < 40) return "Bold";
  if (avgSaturation < 20) return "Neutral";
  if (avgSaturation < 40) return "Muted";

  return categories[Math.floor(Math.random() * categories.length)];
}

export function generateColorPalette(isDarkMode: boolean = false): ColorPalette {
  const primary = generateRandomColor();
  const secondary = Color(primary).rotate(180).hex();
  const accent = Color(primary).rotate(120).hex();
  
  let background, text;
  if (isDarkMode) {
    // Ensure dark background and light text
    background = Color(generateRandomColor())
      .darken(0.8)
      .desaturate(0.2)
      .hex();
    text = Color(generateRandomColor())
      .lighten(0.8)
      .saturate(0.1)
      .hex();
  } else {
    // Ensure light background and dark text
    background = Color(generateRandomColor())
      .lighten(0.8)
      .desaturate(0.2)
      .hex();
    text = Color(generateRandomColor())
      .darken(0.8)
      .saturate(0.1)
      .hex();
  }

  const palette = { primary, secondary, accent, background, text };
  const name = generatePaletteName();
  const category = getCategory(palette);

  return { ...palette, name, category };
}

export function getContrastColor(color: string): string {
  return Color(color).isDark() ? '#FFFFFF' : '#000000';
}

export async function downloadPalette(colors: ColorPalette) {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  const margin = 20;
  const colorBlockHeight = 30;
  const colorBlockWidth = 60;

  // Add title
  doc.setFontSize(24);
  doc.setTextColor(0, 0, 0);
  doc.text(`${colors.name} Palette`, margin, margin);

  // Add category and date
  doc.setFontSize(12);
  doc.text(`Category: ${colors.category}`, margin, margin + 10);
  doc.text(`Generated on ${new Date().toLocaleDateString()}`, margin, margin + 20);

  // Draw color blocks and labels
  const colorEntries = Object.entries(colors).filter(([key]) => key !== 'name' && key !== 'category');
  colorEntries.forEach(([name, color], index) => {
    const y = margin + 40 + (index * (colorBlockHeight + 15));
    
    // Draw color block
    doc.setFillColor(color);
    doc.rect(margin, y, colorBlockWidth, colorBlockHeight, 'F');
    
    // Add color information
    doc.setTextColor(0, 0, 0);
    doc.text(name.charAt(0).toUpperCase() + name.slice(1), margin + colorBlockWidth + 10, y + 10);
    doc.text(color.toUpperCase(), margin + colorBlockWidth + 10, y + 20);
  });

  // Add watermark
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128); // Gray color for watermark
  doc.text('Palette generated by Lazy Tints (www.lazytints.com)', margin, doc.internal.pageSize.height - 10);

  // Save the PDF
  doc.save(`lazytints-${colors.name.toLowerCase().replace(' ', '-')}.pdf`);
}

